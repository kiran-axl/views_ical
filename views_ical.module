<?php

use Drupal\views\Plugin\views\field\EntityField;
use Eluceo\iCal\Component\Calendar;
use Eluceo\iCal\Component\Event;
use Eluceo\iCal\Component\Timezone;

/**
 * Prepares variables for Views iCal template.
 *
 * Default template: views-view-ical.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - view: A View object.
 */
function views_ical_preprocess_views_view_ical(&$variables) {
  module_load_include('inc', 'views', 'views.theme');
  /** @var \Drupal\Core\Entity\EntityFieldManagerInterface $field_manager */
  $field_manager = \Drupal::service('entity_field.manager');

  $view = $variables['view'];
  /** @var \Drupal\views\Plugin\views\field\EntityField[] $fields */
  $fields = $view->field;
  /** @var \Drupal\views_ical\Plugin\views\style\Ical $ical_style */
  $ical_style = $view->style_plugin;
  $view->getResponse()->headers->set('Content-Type', 'text/calendar; charset=utf-8');
  if ($view->display_handler->getOption('sitename_title')) {
    $config = \Drupal::config('system.site');
    $title = $config->get('name');
    if ($slogan = $config->get('slogan')) {
      $title .= ' - ' . $slogan;
    }
  }
  else {
    $title = $view->getTitle();
  }
  $variables['title'] = $title;

  // TODO: Move the calendar generation inside
  // TODO: \Drupal\views_ical\Plugin\views\style\Ical.
  $calendar = new Calendar('-//Drupal iCal API//EN');
  $user_timezone = \drupal_get_user_timezone();

  /** @var string $user_timezone */
  $v_timezone = new Timezone($user_timezone);
  $calendar->setTimezone($v_timezone);

  /** @var \Drupal\Core\Field\FieldDefinitionInterface[] $field_storage_definitions */
  $field_storage_definitions = $field_manager->getFieldStorageDefinitions($fields[$variables['options']['date_field']]->definition['entity_type']);
  $date_field_definition = $field_storage_definitions[$fields[$variables['options']['date_field']]->definition['field_name']];

  // Make sure the events are made as per the configuration in view.
  /** @var string $timezone_override */
  $timezone_override = $fields[$variables['options']['date_field']]->options['settings']['timezone_override'];
  if ($timezone_override) {
    $timezone = new \DateTimeZone($timezone_override);
  }
  else {
    $timezone = new \DateTimeZone($user_timezone);
  }

  foreach ($variables['rows'] as $row) {
    /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
    $entity = $row['#row']->_entity;

    // Use date_recur's API to generate the events.
    // Recursive events will be automatically handled here.
    if ($date_field_definition->getType() === 'date_recur') {
      /** @var \Drupal\date_recur\Plugin\Field\FieldType\DateRecurItem[] $item */
      $field_items = $row['#row']->_entity->{$variables['options']['date_field']};

      foreach ($field_items as $index => $item) {
        /** @var \Drupal\date_recur\DateRange[] $occurrences */
        $occurrences = $item->getHelper()->getOccurrences();

        foreach ($occurrences as $occurrence) {
          // TODO: Move this code for setting defaults inside a method.
          $event = new Event();

          $summary = $ical_style->getFieldValue($row['#row']->index, $variables['options']['summary_field']);
          if ($summary) {
            $event->setSummary($summary);
          }

          $location = $ical_style->getFieldValue($row['#row']->index, $variables['options']['location_field']);
          if ($location) {
            $event->setLocation($location);
          }

          $description = $ical_style->getFieldValue($row['#row']->index, $variables['options']['description_field']);
          if ($description) {
            $event->setDescription(\strip_tags($description));
          }

          $event->setUseTimezone(TRUE);

          /** @var \DateTime $start_datetime */
          $start_datetime = $occurrence->getStart();
          $start_datetime->setTimezone($timezone);
          $event->setDtStart($start_datetime);

          /** @var \DateTime $end_datetime */
          $end_datetime = $occurrence->getEnd();
          $end_datetime->setTimezone($timezone);
          $event->setDtEnd($end_datetime);

          $calendar->addComponent($event);
        }
      }
    }
    else {
      // Create events by date entries.
      foreach ($entity->get($variables['options']['date_field'])->getValue() as $date_entry) {
        // TODO: Move this code for setting defaults inside a method.
        $event = new Event();

        $summary = $ical_style->getFieldValue($row['#row']->index, $variables['options']['summary_field']);
        if ($summary) {
          $event->setSummary($summary);
        }

        $location = $ical_style->getFieldValue($row['#row']->index, $variables['options']['location_field']);
        if ($location) {
          $event->setLocation($location);
        }

        $description = $ical_style->getFieldValue($row['#row']->index, $variables['options']['description_field']);
        if ($description) {
          $event->setDescription(\strip_tags($description));
        }

        $event->setUseTimezone(TRUE);

        $start_datetime = new \DateTime($date_entry['value'], new \DateTimeZone('UTC'));
        $start_datetime->setTimezone($timezone);
        $event->setDtStart($start_datetime);

        if (!empty($date_entry['end_value'])) {
          $end_datetime = new \DateTime($date_entry['end_value'], new \DateTimeZone('UTC'));
          $end_datetime->setTimezone($timezone);
          $event->setDtEnd($end_datetime);
        }

        $calendar->addComponent($event);
      }
    }
  }


  $variables['ical'] = $calendar->render();

  template_preprocess_views_view_unformatted($variables);
}

/**
 * Prepares variables for Views iCal Fields template.
 *
 * Default template: views-view-ical-fields.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - view: A View object.
 */
function views_ical_preprocess_views_view_ical_fields(&$variables) {
  module_load_include('inc', 'views', 'views.theme');
  template_preprocess_views_view_fields($variables);
}
